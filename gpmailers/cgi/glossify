#!/usr/bin/python
#----------------------------------------------------------------------
#
# $Id$
#
# Service for Cancer.gov (task #4001).
#
# BZIssue::4001
# BZIssue::4701
#
#----------------------------------------------------------------------

import sys, xml.dom.minidom, WebService, time, re, MySQLdb, cgi, cdrutil

LOG_LEVEL  = 1
STANDALONE = False

def debugWrite(what, logLevel = 1):
    if logLevel <= LOG_LEVEL:
        try:
            if cdrutil.getEnvironment() == 'CBIIT':
                logFile = open('/weblogs/glossifier/glossifier.log', 'a')
            else:
                logFile = open('/tmp/glossifier.log', 'a')
            now     = time.strftime("%Y-%m-%d %H:%M:%S")
            logFile.write("%s: %s\n" % (now, what))
            logFile.close()
        except:
            if STANDALONE:
                raise

def getTextContent(node):
    text = []
    for child in node.childNodes:
        if child.nodeType in (child.TEXT_NODE, child.CDATA_SECTION_NODE):
            text.append(child.nodeValue)
    return u"".join(text)

def toRegex(name):
    return (name
            .replace(u"\\", ur"\\")
            .replace(u"+",  ur"\+")
            .replace(u" ",  ur"\s+")
            .replace(u".",  ur"\.")
            .replace(u"^",  ur"\^")
            .replace(u"$",  ur"\$")
            .replace(u"*",  ur"\*")
            .replace(u"?",  ur"\?")
            .replace(u"{",  ur"\{")
            .replace(u"}",  ur"\}")
            .replace(u"[",  ur"\[")
            .replace(u"]",  ur"\]")
            .replace(u"|",  ur"\|")
            .replace(u"(",  ur"\(")
            .replace(u"'",  ur"['\u2019]")
            .replace(u")",  ur"\)"))

def buildRegex(names, languages, dictionaries):
    nameSet = set()
    for name in names:
        for docId in names[name]:
            for language in names[name][docId]:
                if language in languages or not languages:
                    if not dictionaries:
                        nameSet.add(name)
                    else:
                        dictSet = names[name][docId][language]
                        if dictionaries.intersection(dictSet):
                            nameSet.add(name)
    nameList = list(nameSet)
    nameList.sort(lambda first, second: cmp(len(second), len(first)))
    regexNames = u"|".join([toRegex(n) for n in nameList])
    return u"(?<!\\w)(%s)(?!\\w)" % regexNames

def loadNames():
    if cdrutil.getEnvironment() == 'CBIIT':
        h = cdrutil.AppHost(cdrutil.getEnvironment(), cdrutil.getTier(),
                            filename = '/etc/cdrapphosts.rc')
        conn = MySQLdb.connect(user = 'glossifier',
                               host = h.host['DBNIX'][0], #'***REMOVED***-d',
                               port = 3600,
                               passwd = '***REMOVED***',
                               db = 'glossifier')
    else:
        conn = MySQLdb.connect(user = 'glossifier',
                               passwd = '***REMOVED***',
                               db = 'glossifier')

    cursor = conn.cursor()
    cursor.execute("SELECT terms_dict FROM terms")
    return eval(cursor.fetchall()[0][0].strip())

whitespace = re.compile(u"\\s+", re.UNICODE)
def normalize(name):
    return whitespace.sub(" ", name).replace(u"\u2019", "'").lower()

def maskMarkup(match):
    return u"|" * len(match.group(0))

def glossify(request, soapNS):
    names = loadNames()
    doc = re.sub(u"(?s)<!--.*?-->", maskMarkup, request.fragment)
    doc = re.sub(u"(?isu)<a\\s[^>]+>.*?</a>|{{.*?}}", maskMarkup, doc)
    doc = re.sub(u"<[^>]*>", maskMarkup, doc)
    regex = buildRegex(names, request.languages, request.dictionaries)
    seen = set()
    matches = []
    for m in re.finditer(regex, doc, re.UNICODE | re.IGNORECASE):
        word = doc[m.start():m.end()]
        matches.append((word, m.start(), m.end()))
    response = [u"""\
<?xml version='1.0' encoding='utf-8'?>
<soap:Envelope xmlns:soap='%s'>
 <soap:Body>
  <glossifyResponse xmlns='cips.nci.nih.gov/cdr'>
   <glossifyResult>
""" % soapNS]
    for word, start, end in matches:
        length = end - start
        key = normalize(word)
        if key in seen:
            firstOccurrence = 'false'
        else:
            firstOccurrence = 'true'
        seen.add(key)
        terms = names.get(key)
        if not terms:
            debugWrite(u"can't find '%s'" % key)
        else:
            for docId in terms:
                term = terms[docId]
                for language in term:
                    if request.languages and language not in request.languages:
                        continue
                    dictionaries = term[language]
                    if not dictionaries and not request.dictionaries:
                        response.append(u"""\
    <Term>
     <start>%d</start>
     <length>%d</length>
     <docId>CDR%010d</docId>
     <language>%s</language>
     <firstOccurrence>%s</firstOccurrence>
    </Term>
""" % (start, length, docId, language, firstOccurrence))
                    else:
                        for dictionary in dictionaries:
                            if request.dictionaries:
                                if dictionary not in request.dictionaries:
                                    continue
                            response.append(u"""\
    <Term>
     <start>%d</start>
     <length>%d</length>
     <docId>CDR%010d</docId>
     <dictionary>%s</dictionary>
     <language>%s</language>
     <firstOccurrence>%s</firstOccurrence>
    </Term>
""" % (start, length, docId, dictionary, language, firstOccurrence))
    response.append(u"""\
   </glossifyResult>
  </glossifyResponse>
 </soap:Body>
</soap:Envelope>
""")
    return u"".join(response)

class GlossifyRequest:
    def __init__(self, documentElement):
        self.fragment = ''
        self.dictionaries = set()
        self.languages = set()
        parameterNodes = []
        ns = 'cips.nci.nih.gov/cdr'
        for node in documentElement.getElementsByTagNameNS(ns, 'glossify'):
            for child in node.childNodes:
                if child.nodeType == child.ELEMENT_NODE:
                    parameterNodes.append(child)
        if not parameterNodes:
            # soapPy doesn't handle the namespace correctly.
            for node in documentElement.getElementsByTagName('glossify'):
                for child in node.childNodes:
                    if child.nodeType == child.ELEMENT_NODE:
                        parameterNodes.append(child)
        if len(parameterNodes) >= 1:
            self.fragment = getTextContent(parameterNodes[0])
            if len(parameterNodes) >= 2:
                for child in parameterNodes[1].childNodes:
                    if child.nodeType == child.ELEMENT_NODE:
                        dictionary = getTextContent(child).strip()
                        if dictionary:
                            self.dictionaries.add(dictionary)
                if len(parameterNodes) >= 3:
                    for child in parameterNodes[2].childNodes:
                        if child.nodeType == child.ELEMENT_NODE:
                            language = getTextContent(child).strip()
                            if language:
                                self.languages.add(language)

def makeFaultResponse(soapNS, agent, message):
    return WebService.Response(u"""\
<?xml version='1.0' encoding='utf-8'?>
<soap:Envelope xmlns:soap='%s'>
 <soap:Body>
  <soap:Fault>
   <faultcode>soap:%s</faultcode>
   <faultstring>%s</faultstring>
   <detail/>
  </soap:Fault>
 </soap:Body>
</soap:Envelope>
""" % (soapNS, agent, message))

def main():
    global LOG_LEVEL
    LOG_LEVEL = 1
    global STANDALONE
    if len(sys.argv) > 1 and sys.argv[1] == "--standalone":
        STANDALONE = True
    soapNS = 'http://schemas.xmlsoap.org/soap/envelope/'
    contentType = 'text/xml'
    try:
        request = WebService.Request(STANDALONE, debugWrite)
        LOG_LEVEL = request.logLevel
        debugWrite("%s request from %s" % (request.type, request.client), 2)
        debugWrite("Request body:\n%s" % request.message, 2)
        if '/www.w3.org/2003/05/soap-envelope' in request.message.lower():
            soapNS = 'http://www.w3.org/2003/05/soap-envelope'
            contentType = 'application/soap+xml'
    except Exception, e:
        if STANDALONE:
            debugWrite("Failure: %s" % e)
            raise
        else:
            fp = open('glossifier.xml')
            doc = fp.read()
            fp.close()
            response = WebService.Response(doc)
            response.send()
    try:
        glossifyRequest = GlossifyRequest(request.doc)
        try:
            debugWrite("doc: %s" % request.message)
        except:
            pass
        debugWrite("fragment: '%s..." % glossifyRequest.fragment)
        debugWrite("languages: %s" % repr(glossifyRequest.languages))
        debugWrite("dictionaries: %s" % repr(glossifyRequest.dictionaries))
        try:
            response = WebService.Response(glossify(glossifyRequest, soapNS))
        except Exception, e:
            debugWrite("glossify(): %s" % e)
            e = cgi.escape(u"%s" % e)
            response = makeFaultResponse(soapNS, u"Server", e)
    except Exception, e:
        debugWrite("GlossifyRequest(): %s" % e)
        e = cgi.escape(u"%s" % e)
        response = makeFaultResponse(soapNS, u"Client", e)
    debugWrite("Response body:\n%s" % response.body) #, 2)
    response.send(contentType)

if __name__ == '__main__':
    main()

