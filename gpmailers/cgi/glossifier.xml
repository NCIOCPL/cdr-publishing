<?xml version='1.0' encoding='UTF-8'?>
<w:definitions          xmlns:w = 'http://schemas.xmlsoap.org/wsdl/'
                     xmlns:soap = 'http://schemas.xmlsoap.org/wsdl/soap/'
                   xmlns:soap12 = 'http://schemas.xmlsoap.org/wsdl/soap12/'
                        xmlns:s = 'http://www.w3.org/2001/XMLSchema'
                     xmlns:http = 'http://schemas.xmlsoap.org/wsdl/http/'
                          xmlns = 'cips.nci.nih.gov/cdr'
                targetNamespace = 'cips.nci.nih.gov/cdr'>

 <!--
  ======================================================================
  Types used by the glossifier service.

  Modified 2008-07-04 at Bryan's request to flatten out the nested
  arrays of the Term type into a denormalized two-dimensional array;
  added new 'firstOccurrence' member of Term object.

  Modified 2009-11-13 at Bryan's request to ignore HTML comments and
  characters between any '<' and the next following '>'.

  All three parameters for the service are required, though the
  dictionaries and languages parameters can be arrays with zero
  members.

  Passed:

      fragment

          Possibly empty string containing an HTML fragment, which is
          not necessarily well-formed XML.  The service scans the
          input string for matches with term names which represent
          glossary concepts in PDQ.  Matches are made without regard
          to case or differences in whitespace embedded within the
          term name.  In addition the Unicode character RIGHT SINGLE
          QUOTATION MARK (U+2019) is mapped to the APOSTROPHE
          character (U+0027).  Matches are made to the longest
          possible sequence of characters in the input string,
          scanning from the beginning of the string toward the end,
          and substrings of a longer matched string are not reported.
          For example, in the input fragment "breast cancer" a match
          with the term name "breast cancer" is reported, but no match
          is reported for "breast" or for "cancer," even though the
          latter two words are also found in the PDQ glossary.  Even
          though the fragment is not necessarily well-formed XML, the
          service attempts to identify and mask portions of the input
          which are likely to match the patterns for certain HTML
          markup.  This masking is done in three passes, and any
          portion of the input fragment which is masked by an earlier
          pass is ignore by subsequent masking passes when looking for
          these markup constructs.  The first pass masks out all
          substrings which look like HTML comments (everything
          beginning with "<!" followed by two hyphen characters up to
          and including the next two hyphen characters followed
          immediately by ">" [this comment can't show those tokens in
          a more straightforward manner because the sequence of two
          hyphens is not allowed inside an XML comment]); the second
          pass ignores substrings which match the pattern for HTML
          anchor elements, including text or mixed content (that is,
          everything between "<a\s+", where "\s+" represents a
          sequence of one or more whitespace characters, and the next
          occurrence of "</a>"; this pass also masks out everything
          between "{{" and the next occurrence of "}}" (inclusive);
          the third pass masks out substrings which match the pattern
          for HTML tags (but not the text content of the elements
          delimited by those tags), looking for everything not already
          masked out which begins with the character "<" through the
          next occurrence of the ">" character.  Although this
          approach risks masking out too much in the event of an
          unescaped "<" appearing in the middle of text content, that
          risk is balanced by the decreased likelihood of presenting
          attribute values inside element tags for glossary markup.

      dictionaries

          Possibly empty array of strings identifying dictionaries to
          which PDQ glossary terms are assigned.  If the array of
          dictionary strings is empty, then matched term names are
          reported without regard to which dictionaries have been
          associated with the terms, even for terms which have not
          been associated with any dictionary at all.  If the array of
          dictionary strings is not empty, then only those terms which
          have been assigned to at least one of the dictionaries named
          in the array will be reported.  Currently, the only
          dictionary which is associated with the PDQ glossary terms
          is "Cancer.gov."

      languages

          Possibly empty array of strings identifying languages for
          which term names should be reported.  If the array of
          language strings is empty, then matched term names are
          reported without regard to language of the term.  If the
          array of language strings is not empty, then only term names
          in the language(s) specified will be reported.  ISO
          two-character standard language codes are used as the values
          in the array.  Currently the only two languages supported
          are English ("en") and Spanish ("es").

  Returned:

      A possibly empty array of Term objects.  Each object represents
      a single match of a segment of the input fragment with a PDQ
      glossary term name.  Only names which are published on
      Cancer.gov will be included in the array.  Matching names in a
      given language for which the PDQ glossary does not have a
      published definition in that language will not be included in
      the array.  The following members are defined for the Term
      objects:

      start

          Required integer representing the offset of the beginning of
          the portion of the input fragment where the match with the
          glossary term name was found.  The offset 0 (zero)
          represents the beginning of the input fragment.  Positions
          are calculated by counting Unicode characters in the input
          fragment, not bytes in a serialized representation of the
          fragment.

      length

          Required integer representing the number of Unicode
          characters (not bytes in a serialized representation of the
          fragment) which matched the name of the term.

      docId

          Required integer containing the PDQ identifier for the
          Glossary document.

      dictionary

          Optional string identifying a dictionary in which the term
          is reported.  If more than one dictionary is reported for a
          term, a separate Term object will be included in the array
          for each dictionary reported.

      language

          Required string identifying the language of the term.  If
          the same string is used in more than one language for a
          term, and the clients requests matches in those languages,
          then separate Term objects will be included in the array for
          each such language.

      firstOccurrence

          Required boolean flag indicating whether this match
          represents the first time the term name was matched in the
          input fragment.

  ======================================================================
 -->
 <w:types>
  <s:schema  elementFormDefault = 'qualified'
                targetNamespace = 'cips.nci.nih.gov/cdr'>
   <s:element              name = 'glossify'>
    <s:complexType>
     <s:sequence>
      <s:element           name = 'fragment'
                           type = 's:string'/>
      <s:element           name = 'dictionaries'
                           type = 'ArrayOfString'/>
      <s:element           name = 'languages'
                           type = 'ArrayOfString'/>
     </s:sequence>
    </s:complexType>
   </s:element>
   <s:complexType          name = 'ArrayOfString'>
    <s:sequence>
     <s:element            name = 'string'
                           type = 's:string'
                      minOccurs = '0'
                      maxOccurs = 'unbounded'/>
    </s:sequence>
   </s:complexType>
   <s:element              name = 'glossifyResponse'>
    <s:complexType>
     <s:sequence>
      <s:element           name = 'glossifyResult'
                           type = 'ArrayOfTerm'/>
     </s:sequence>
    </s:complexType>
   </s:element>
   <s:complexType          name = 'ArrayOfTerm'>
    <s:sequence>
     <s:element            name = 'Term'
                           type = 'Term'
                      minOccurs = '0'
                      maxOccurs = 'unbounded'/>
    </s:sequence>
   </s:complexType>
   <s:complexType          name = 'Term'>
    <s:sequence>
     <s:element            name = 'start'
                           type = 's:int'/>
     <s:element            name = 'length'
                           type = 's:int'/>
     <s:element            name = 'docId'
                           type = 's:string'/>
     <s:element            name = 'dictionary'
                           type = 's:string'
                      minOccurs = '0'/>
     <s:element            name = 'language'
                           type = 's:string'/>
     <s:element            name = 'firstOccurrence'
                           type = 's:boolean'/>
    </s:sequence>
   </s:complexType>
  </s:schema>
 </w:types>

 <!-- Request/response messages exchanged for Glossifier service. -->
 <w:message                name = 'glossifySoapIn'>
  <w:part                  name = 'parameters'
                        element = 'glossify'/>
 </w:message>
 <w:message                name = 'glossifySoapOut'>
  <w:part                  name = 'parameters'
                        element = 'glossifyResponse'/>
 </w:message>

 <!-- Service bindings (SOAP 1.1 and 1.2 supported). -->
 <w:portType               name = 'GlossifierSoap'>
  <w:operation             name = 'glossify'>
   <w:input             message = 'glossifySoapIn'/>
   <w:output            message = 'glossifySoapOut'/>
  </w:operation>
 </w:portType>
 <w:binding                name = 'GlossifierSoap'
                           type = 'GlossifierSoap'>
  <soap:binding       transport = 'http://schemas.xmlsoap.org/soap/http'/>
  <w:operation             name = 'glossify'>
   <soap:operation   soapAction = 'cips.nci.nih.gov/cdr/glossify'
                          style = 'document'/>
   <w:input>
    <soap:body              use = 'literal'/>
   </w:input>
   <w:output>
    <soap:body              use = 'literal'/>
   </w:output>
  </w:operation>
 </w:binding>
 <w:binding                name = 'GlossifierSoap12'
                           type = 'GlossifierSoap'>
  <soap12:binding     transport = 'http://schemas.xmlsoap.org/soap/http'/>
  <w:operation             name = 'glossify'>
   <soap12:operation soapAction = 'cips.nci.nih.gov/cdr/glossify'
                          style = 'document'/>
   <w:input>
    <soap12:body            use = 'literal'/>
   </w:input>
   <w:output>
    <soap12:body            use = 'literal'/>
   </w:output>
  </w:operation>
 </w:binding>

 <!-- Where the service can be invoked. -->
 <w:service                name = 'Glossifier'>
  <w:port                  name = 'GlossifierSoap'
                        binding = 'GlossifierSoap'>
   <soap:address       location = 'http://PDQUpdate.cancer.gov/u/glossify'/>
   <!-- To be replaced with line below in CBIIT DEV environment
   <soap:address       location = 'http://***REMOVED***-w/cgi-bin/glossify'/>
   -->
  </w:port>
  <w:port                  name = 'GlossifierSoap12'
                        binding = 'GlossifierSoap12'>
   <soap12:address     location = 'http://PDQUpdate.cancer.gov/u/glossify'/>
   <!-- To be replaced with line below in CBIIT DEV environment
   <soap12:address     location = 'http://***REMOVED***-w/cgi-bin/glossify'/>
   -->
  </w:port>
 </w:service>

</w:definitions>
