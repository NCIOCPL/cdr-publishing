#!/usr/bin/python

#----------------------------------------------------------------------
#
# $Id$
#
# Import GeneticsProfessional emailer information and notify the GP
# that he/she needs to review the information.
#
# BZIssue::4630
#
#----------------------------------------------------------------------
import util, bz2, lxml.etree as etree

SENDER = 'GeneticsDirectory@cancer.gov'
emailBody = """\
<p>Dear Member of the NCI Cancer Genetics Services Directory:</p>

<p>We contact you annually to update your listing in the National Cancer
Institute's (NCI) Cancer Genetics Services Directory.  Please take a
moment to update your information on your personalized Directory Update
Web page.  Before you get started, please note:</p>

<ul>
 <li>This page will be available for 30 days.  If you are not able
     to complete the update in that time, please email
     <a href='mailto:GeneticsDirectory@cancer.gov'
     >GeneticsDirectory@cancer.gov</a>.</li>
 <li>If you have problems with the link or using the online update system,
     please send an email to
     <a href='mailto:GeneticsDirectory@cancer.gov'
     >GeneticsDirectory@cancer.gov</a>.</li>
</ul>

<p>To begin your update, click on the link below or copy and paste the link
into your browser.

<p><a href='%s'>%s</a></p>

<p>Thank you for helping us keep the NCI Cancer Genetics Services Directory
current.</p>

<p>Coordinator<br />
NCI Cancer Genetics Services Directory<br />
GeneticsDirectory@cancer.gov</p>
"""
testers = ('***REMOVED***',
           '***REMOVED***',
           '***REMOVED***'
           )
def base36(n):
    if n == 0:
        return "0"
    elif n < 0:
        return '-' + base36(abs(n))
    lowestDigit = "0123456789abcdefghijklmnopqrstuvwxyz"[n % 36]
    higherDigits = n // 36
    if higherDigits == 0:
        return lowestDigit
    else:
        return base36(higherDigits) + lowestDigit

def loadEmailers():
    conn = util.getConnection()
    cursor = conn.cursor()
    cursor.execute("""\
        SELECT id, emailers
          FROM dropbox.gp_emailer_job
         WHERE imported IS NULL""")
    rows = cursor.fetchall()
    for jobId, compressedDoc in rows:
        tree = etree.XML(bz2.decompress(compressedDoc))
        for child in tree.findall('GP'):
            try:
                loadEmailer(conn, cursor, jobId, child)
            except Exception, e:
                msg = (u"failure loading mailer for CDR%s in job %s: %s" %
                       (child.get('id'), jobId, e)).encode('utf-8')
                util.log(msg)
                sys.stderr.write("%s\n" % msg)
        cursor.execute("""\
            UPDATE dropbox.gp_emailer_job
               SET imported = NOW()
             WHERE id = %s""", jobId)
        conn.commit()
        msg = "loaded mailers for job %d" % jobId
        util.log(msg)
        print msg

def loadEmailer(conn, cursor, jobId, node):
    trackerId = node.get('tracker')
    docId = node.get('id')
    name = email = u''
    for child in node.findall('FullName'):
        name = child.text
    for child in node.findall('Contact/Email'):
        email = child.text
    if not email:
        msg = ("no email address for sending emailer %s (CDR%s)" %
               (trackerId, docId))
        util.log(msg)
        sys.stderr.write("%s\n" % msg)
    doc = etree.tostring(node)
    cursor.execute("""\
        INSERT INTO emailers.gp_emailer (id, cdr_id, job, email, name, xml,
                                         original, mailed)
             VALUES (%s, %s, %s, %s, %s, %s, %s, NOW())""",
                   (trackerId, docId, jobId, email, name, doc, doc))
    conn.commit()
    print "loaded emailer %s (CDR%s)" % (trackerId, docId)
    try:
        subject = 'NCI Cancer Genetics Services Directory update request'
        if util.isProductionHost():
            address = [email]
        else:
            address = testers
        emailerId = base36((int(trackerId) << 32) + int(docId))
        url = "http://%s%s/cgsd.py?id=%s" % (util.WEB_HOST, util.CGI_BASE, 
                                             emailerId)
        message = util.sendMail(SENDER, address, subject,
                                emailBody % (url, url), html=True)
    except Exception, e:
        error = ("Failure emailing %s for batch %s: %s" %
                 (address, emailerId, e))
        util.log(error)
        try:
            util.sendMail(SENDER, util.OPERATOR,
                          subject + " *** FAILURE ***", error)
        except:
            pass
try:
    loadEmailers()
except Exception, e:
    print "LoadGPEmailers failure: %s" % e
    util.log("LoadGPEmailers failure: %s" % e)
