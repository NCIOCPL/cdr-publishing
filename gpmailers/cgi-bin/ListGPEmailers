#!/usr/bin/python

#----------------------------------------------------------------------
#
# Tool used by CIAT to review Genetics Professional electronic mailers,
# and to mark mailers which have been returned to sender ("bounced").
#
# JIRA::OCECDR-3734
# JIRA::OCECDR-4107
#
#----------------------------------------------------------------------
import cdrutil, cgi, sys

LINK_STYLE = "padding-right: 10px;"

def load_years(cursor):
    cursor.execute("SELECT DISTINCT(SUBSTR(mailed, 1, 4)) FROM gp_emailer")
    return sorted([row[0] for row in cursor.fetchall()])

def make_links(session, years):
    return " ".join([make_link(session, year) for year in years])

def make_link(session, year):
    url = "ListGPEmailers?Session=%s&year=%s" % (session, year)
    return "<a class='year-link' href='%s'>%s</a>" % (url, year)

conn = cdrutil.getConnection('emailers')
cursor = conn.cursor()
fields = cgi.FieldStorage()
bounce = fields.getvalue('bounce')
debug = fields.getvalue('debug')
raw = fields.getvalue('raw')
year = fields.getvalue("year")
years = load_years(cursor)
session = fields.getvalue("Session")
if not cdrutil.can_do(session, "GP MAILERS"):
    print "Status: 403\n\n<h1>Access to GP mailers denied</h1>"
    sys.exit(0)

if bounce:
    try:
        bounce = int(bounce)
    except:
        print "Status: 400\n\n<h1>Tampering detected</h1>"
        sys.exit(0)
    cursor.execute("""\
        UPDATE gp_emailer
           SET bounced = NOW()
         WHERE id = %d""" % bounce)
    conn.commit()

if raw:
    cursor.execute("""\
    SELECT id, cdr_id, job, email, name, mailed, completed, bounced, recorded
      FROM emailers.gp_emailer
  ORDER BY id""")
    print "Content-type: text/plain\n"
    print repr(tuple([col[0] for col in cursor.description]))
    for row in cursor.fetchall():
        print repr(tuple(row))
    sys.exit(0)

if not year:
    cdrutil.sendPage("""\
<!DOCTYPE html>
<html>
 <body>
  <style>.year-link { %s }</style>
  <h1>Select year for which to view mailers</h1>
  <p>%s</p>
 </body>
</html>""" % (LINK_STYLE, make_links(session, years)))

if year not in years:
    print "Status: 400\n\n<h1>Tampering detected</h1>"
    sys.exit(0)

cursor.execute("""\
    SELECT id, cdr_id, job, email, name, mailed, completed, bounced
      FROM emailers.gp_emailer
     WHERE SUBSTR(mailed, 1, 4) = %s
  ORDER BY id DESC""" % year)
output = [u"""\
<!DOCTYPE html>
<html>
 <body>
  <style>.year-link { %s }</style>
  <h1>Mailers for %s</h1>
  <p>%s</p>
  <table border='1' cellpadding='2' cellspacing='0'>
   <tr>
    <th>Mailer ID</th>
    <th>CDR Person ID</th>
    <th>Job ID</th>
    <th>Email Address</th>
    <th>Person Name</th>
    <th>Mailed</th>
    <th>Completed</th>
    <th>Bounced</th>
   </tr>
""" % (LINK_STYLE, year, make_links(session, years))]
for (mailerId, cdrId, jobId, email, name, mailed,
     completed, bounced) in cursor.fetchall():
    if completed:
        url = 'ShowGPChanges.py?id=%d&Session=%s' % (mailerId, session)
        completed = u"<a href='%s'>%s</a>" % (url, completed)
    else:
        completed = u"&nbsp;"
    if not bounced:
        url = "ListGPEmailers?bounce=%d&Session=%s" % (mailerId, session)
        url += "&year=%s" % year
        bounced = "<a href='%s'>Mark as Bounced</a>" % url
    output.append(u"""\
   <tr>
    <td><a href='cgsd.py?id=%s%s'>%d</a></td>
    <td>%d</td>
    <td>%d</td>
    <td>%s</td>
    <td>%s</td>
    <td>%s</td>
    <td>%s</td>
    <td>%s</td>
   </tr>
""" % (cdrutil.base36((mailerId << 32) + cdrId), debug and u"&debug=1" or u"",
       mailerId, cdrId, jobId, email, cgi.escape(name), mailed, completed,
       bounced))
output.append(u"""\
  </table>
 </body>
</html>
""")
cdrutil.sendPage(u"".join(output))
